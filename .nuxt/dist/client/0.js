(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/image-meta/dist/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/image-meta/dist/index.mjs ***!
  \************************************************/
/*! exports provided: imageMeta, types */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageMeta\", function() { return imageMeta; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"types\", function() { return types; });\nconst BMP = {\n  validate(buffer) {\n    return buffer.toString(\"ascii\", 0, 2) === \"BM\";\n  },\n  calculate(buffer) {\n    return {\n      height: Math.abs(buffer.readInt32LE(22)),\n      width: buffer.readUInt32LE(18)\n    };\n  }\n};\n\nconst TYPE_ICON = 1;\nconst SIZE_HEADER$1 = 2 + 2 + 2;\nconst SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4;\nfunction getSizeFromOffset(buffer, offset) {\n  const value = buffer.readUInt8(offset);\n  return value === 0 ? 256 : value;\n}\nfunction getImageSize$1(buffer, imageIndex) {\n  const offset = SIZE_HEADER$1 + imageIndex * SIZE_IMAGE_ENTRY;\n  return {\n    height: getSizeFromOffset(buffer, offset + 1),\n    width: getSizeFromOffset(buffer, offset)\n  };\n}\nconst ICO = {\n  validate(buffer) {\n    if (buffer.readUInt16LE(0) !== 0) {\n      return false;\n    }\n    return buffer.readUInt16LE(2) === TYPE_ICON;\n  },\n  calculate(buffer) {\n    const nbImages = buffer.readUInt16LE(4);\n    const imageSize = getImageSize$1(buffer, 0);\n    if (nbImages === 1) {\n      return imageSize;\n    }\n    const imgs = [imageSize];\n    for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {\n      imgs.push(getImageSize$1(buffer, imageIndex));\n    }\n    const result = {\n      height: imageSize.height,\n      images: imgs,\n      width: imageSize.width\n    };\n    return result;\n  }\n};\n\nconst TYPE_CURSOR = 2;\nconst CUR = {\n  validate(buffer) {\n    if (buffer.readUInt16LE(0) !== 0) {\n      return false;\n    }\n    return buffer.readUInt16LE(2) === TYPE_CURSOR;\n  },\n  calculate(buffer) {\n    return ICO.calculate(buffer);\n  }\n};\n\nconst DDS = {\n  validate(buffer) {\n    return buffer.readUInt32LE(0) === 542327876;\n  },\n  calculate(buffer) {\n    return {\n      height: buffer.readUInt32LE(12),\n      width: buffer.readUInt32LE(16)\n    };\n  }\n};\n\nconst gifRegexp = /^GIF8[79]a/;\nconst GIF = {\n  validate(buffer) {\n    const signature = buffer.toString(\"ascii\", 0, 6);\n    return gifRegexp.test(signature);\n  },\n  calculate(buffer) {\n    return {\n      height: buffer.readUInt16LE(8),\n      width: buffer.readUInt16LE(6)\n    };\n  }\n};\n\nconst SIZE_HEADER = 4 + 4;\nconst FILE_LENGTH_OFFSET = 4;\nconst ENTRY_LENGTH_OFFSET = 4;\nconst ICON_TYPE_SIZE = {\n  ICON: 32,\n  \"ICN#\": 32,\n  \"icm#\": 16,\n  icm4: 16,\n  icm8: 16,\n  \"ics#\": 16,\n  ics4: 16,\n  ics8: 16,\n  is32: 16,\n  s8mk: 16,\n  icp4: 16,\n  icl4: 32,\n  icl8: 32,\n  il32: 32,\n  l8mk: 32,\n  icp5: 32,\n  ic11: 32,\n  ich4: 48,\n  ich8: 48,\n  ih32: 48,\n  h8mk: 48,\n  icp6: 64,\n  ic12: 32,\n  it32: 128,\n  t8mk: 128,\n  ic07: 128,\n  ic08: 256,\n  ic13: 256,\n  ic09: 512,\n  ic14: 512,\n  ic10: 1024\n};\nfunction readImageHeader(buffer, imageOffset) {\n  const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;\n  return [\n    buffer.toString(\"ascii\", imageOffset, imageLengthOffset),\n    buffer.readUInt32BE(imageLengthOffset)\n  ];\n}\nfunction getImageSize(type) {\n  const size = ICON_TYPE_SIZE[type];\n  return { width: size, height: size, type };\n}\nconst ICNS = {\n  validate(buffer) {\n    return buffer.toString(\"ascii\", 0, 4) === \"icns\";\n  },\n  calculate(buffer) {\n    const bufferLength = buffer.length;\n    const fileLength = buffer.readUInt32BE(FILE_LENGTH_OFFSET);\n    let imageOffset = SIZE_HEADER;\n    let imageHeader = readImageHeader(buffer, imageOffset);\n    let imageSize = getImageSize(imageHeader[0]);\n    imageOffset += imageHeader[1];\n    if (imageOffset === fileLength) {\n      return imageSize;\n    }\n    const result = {\n      height: imageSize.height,\n      images: [imageSize],\n      width: imageSize.width\n    };\n    while (imageOffset < fileLength && imageOffset < bufferLength) {\n      imageHeader = readImageHeader(buffer, imageOffset);\n      imageSize = getImageSize(imageHeader[0]);\n      imageOffset += imageHeader[1];\n      result.images.push(imageSize);\n    }\n    return result;\n  }\n};\n\nconst J2C = {\n  validate(buffer) {\n    return buffer.toString(\"hex\", 0, 4) === \"ff4fff51\";\n  },\n  calculate(buffer) {\n    return {\n      height: buffer.readUInt32BE(12),\n      width: buffer.readUInt32BE(8)\n    };\n  }\n};\n\nconst BoxTypes = {\n  ftyp: \"66747970\",\n  ihdr: \"69686472\",\n  jp2h: \"6a703268\",\n  jp__: \"6a502020\",\n  rreq: \"72726571\",\n  xml_: \"786d6c20\"\n};\nconst calculateRREQLength = (box) => {\n  const unit = box.readUInt8(0);\n  let offset = 1 + 2 * unit;\n  const numStdFlags = box.readUInt16BE(offset);\n  const flagsLength = numStdFlags * (2 + unit);\n  offset = offset + 2 + flagsLength;\n  const numVendorFeatures = box.readUInt16BE(offset);\n  const featuresLength = numVendorFeatures * (16 + unit);\n  return offset + 2 + featuresLength;\n};\nconst parseIHDR = (box) => {\n  return {\n    height: box.readUInt32BE(4),\n    width: box.readUInt32BE(8)\n  };\n};\nconst JP2 = {\n  validate(buffer) {\n    const signature = buffer.toString(\"hex\", 4, 8);\n    const signatureLength = buffer.readUInt32BE(0);\n    if (signature !== BoxTypes.jp__ || signatureLength < 1) {\n      return false;\n    }\n    const ftypeBoxStart = signatureLength + 4;\n    const ftypBoxLength = buffer.readUInt32BE(signatureLength);\n    const ftypBox = buffer.slice(ftypeBoxStart, ftypeBoxStart + ftypBoxLength);\n    return ftypBox.toString(\"hex\", 0, 4) === BoxTypes.ftyp;\n  },\n  calculate(buffer) {\n    const signatureLength = buffer.readUInt32BE(0);\n    const ftypBoxLength = buffer.readUInt16BE(signatureLength + 2);\n    let offset = signatureLength + 4 + ftypBoxLength;\n    const nextBoxType = buffer.toString(\"hex\", offset, offset + 4);\n    switch (nextBoxType) {\n      case BoxTypes.rreq:\n        const MAGIC = 4;\n        offset = offset + 4 + MAGIC + calculateRREQLength(buffer.slice(offset + 4));\n        return parseIHDR(buffer.slice(offset + 8, offset + 24));\n      case BoxTypes.jp2h:\n        return parseIHDR(buffer.slice(offset + 8, offset + 24));\n      default:\n        throw new TypeError(\"Unsupported header found: \" + buffer.toString(\"ascii\", offset, offset + 4));\n    }\n  }\n};\n\nfunction readUInt(buffer, bits, offset, isBigEndian) {\n  offset = offset || 0;\n  const endian = isBigEndian ? \"BE\" : \"LE\";\n  const methodName = \"readUInt\" + bits + endian;\n  return buffer[methodName].call(buffer, offset);\n}\n\nconst EXIF_MARKER = \"45786966\";\nconst APP1_DATA_SIZE_BYTES = 2;\nconst EXIF_HEADER_BYTES = 6;\nconst TIFF_BYTE_ALIGN_BYTES = 2;\nconst BIG_ENDIAN_BYTE_ALIGN = \"4d4d\";\nconst LITTLE_ENDIAN_BYTE_ALIGN = \"4949\";\nconst IDF_ENTRY_BYTES = 12;\nconst NUM_DIRECTORY_ENTRIES_BYTES = 2;\nfunction isEXIF(buffer) {\n  return buffer.toString(\"hex\", 2, 6) === EXIF_MARKER;\n}\nfunction extractSize(buffer, index) {\n  return {\n    height: buffer.readUInt16BE(index),\n    width: buffer.readUInt16BE(index + 2)\n  };\n}\nfunction extractOrientation(exifBlock, isBigEndian) {\n  const idfOffset = 8;\n  const offset = EXIF_HEADER_BYTES + idfOffset;\n  const idfDirectoryEntries = readUInt(exifBlock, 16, offset, isBigEndian);\n  for (let directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {\n    const start = offset + NUM_DIRECTORY_ENTRIES_BYTES + directoryEntryNumber * IDF_ENTRY_BYTES;\n    const end = start + IDF_ENTRY_BYTES;\n    if (start > exifBlock.length) {\n      return;\n    }\n    const block = exifBlock.slice(start, end);\n    const tagNumber = readUInt(block, 16, 0, isBigEndian);\n    if (tagNumber === 274) {\n      const dataFormat = readUInt(block, 16, 2, isBigEndian);\n      if (dataFormat !== 3) {\n        return;\n      }\n      const numberOfComponents = readUInt(block, 32, 4, isBigEndian);\n      if (numberOfComponents !== 1) {\n        return;\n      }\n      return readUInt(block, 16, 8, isBigEndian);\n    }\n  }\n}\nfunction validateExifBlock(buffer, index) {\n  const exifBlock = buffer.slice(APP1_DATA_SIZE_BYTES, index);\n  const byteAlign = exifBlock.toString(\"hex\", EXIF_HEADER_BYTES, EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES);\n  const isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;\n  const isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;\n  if (isBigEndian || isLittleEndian) {\n    return extractOrientation(exifBlock, isBigEndian);\n  }\n}\nfunction validateBuffer(buffer, index) {\n  if (index > buffer.length) {\n    throw new TypeError(\"Corrupt JPG, exceeded buffer limits\");\n  }\n  if (buffer[index] !== 255) {\n    throw new TypeError(\"Invalid JPG, marker table corrupted\");\n  }\n}\nconst JPG = {\n  validate(buffer) {\n    const SOIMarker = buffer.toString(\"hex\", 0, 2);\n    return SOIMarker === \"ffd8\";\n  },\n  calculate(buffer) {\n    buffer = buffer.slice(4);\n    let orientation;\n    let next;\n    while (buffer.length) {\n      const i = buffer.readUInt16BE(0);\n      if (isEXIF(buffer)) {\n        orientation = validateExifBlock(buffer, i);\n      }\n      validateBuffer(buffer, i);\n      next = buffer[i + 1];\n      if (next === 192 || next === 193 || next === 194) {\n        const size = extractSize(buffer, i + 5);\n        if (!orientation) {\n          return size;\n        }\n        return {\n          height: size.height,\n          orientation,\n          width: size.width\n        };\n      }\n      buffer = buffer.slice(i + 2);\n    }\n    throw new TypeError(\"Invalid JPG, no size found\");\n  }\n};\n\nconst SIGNATURE = \"KTX 11\";\nconst KTX = {\n  validate(buffer) {\n    return SIGNATURE === buffer.toString(\"ascii\", 1, 7);\n  },\n  calculate(buffer) {\n    return {\n      height: buffer.readUInt32LE(40),\n      width: buffer.readUInt32LE(36)\n    };\n  }\n};\n\nconst pngSignature = \"PNG\\r\\n\u001a\\n\";\nconst pngImageHeaderChunkName = \"IHDR\";\nconst pngFriedChunkName = \"CgBI\";\nconst PNG = {\n  validate(buffer) {\n    if (pngSignature === buffer.toString(\"ascii\", 1, 8)) {\n      let chunkName = buffer.toString(\"ascii\", 12, 16);\n      if (chunkName === pngFriedChunkName) {\n        chunkName = buffer.toString(\"ascii\", 28, 32);\n      }\n      if (chunkName !== pngImageHeaderChunkName) {\n        throw new TypeError(\"Invalid PNG\");\n      }\n      return true;\n    }\n    return false;\n  },\n  calculate(buffer) {\n    if (buffer.toString(\"ascii\", 12, 16) === pngFriedChunkName) {\n      return {\n        height: buffer.readUInt32BE(36),\n        width: buffer.readUInt32BE(32)\n      };\n    }\n    return {\n      height: buffer.readUInt32BE(20),\n      width: buffer.readUInt32BE(16)\n    };\n  }\n};\n\nconst PNMTypes = {\n  P1: \"pbm/ascii\",\n  P2: \"pgm/ascii\",\n  P3: \"ppm/ascii\",\n  P4: \"pbm\",\n  P5: \"pgm\",\n  P6: \"ppm\",\n  P7: \"pam\",\n  PF: \"pfm\"\n};\nconst Signatures = Object.keys(PNMTypes);\nconst handlers = {\n  default: (lines) => {\n    let dimensions = [];\n    while (lines.length > 0) {\n      const line = lines.shift();\n      if (line[0] === \"#\") {\n        continue;\n      }\n      dimensions = line.split(\" \");\n      break;\n    }\n    if (dimensions.length === 2) {\n      return {\n        height: parseInt(dimensions[1], 10),\n        width: parseInt(dimensions[0], 10)\n      };\n    } else {\n      throw new TypeError(\"Invalid PNM\");\n    }\n  },\n  pam: (lines) => {\n    const size = {};\n    while (lines.length > 0) {\n      const line = lines.shift();\n      if (line.length > 16 || line.charCodeAt(0) > 128) {\n        continue;\n      }\n      const [key, value] = line.split(\" \");\n      if (key && value) {\n        size[key.toLowerCase()] = parseInt(value, 10);\n      }\n      if (size.height && size.width) {\n        break;\n      }\n    }\n    if (size.height && size.width) {\n      return {\n        height: size.height,\n        width: size.width\n      };\n    } else {\n      throw new TypeError(\"Invalid PAM\");\n    }\n  }\n};\nconst PNM = {\n  validate(buffer) {\n    const signature = buffer.toString(\"ascii\", 0, 2);\n    return Signatures.includes(signature);\n  },\n  calculate(buffer) {\n    const signature = buffer.toString(\"ascii\", 0, 2);\n    const type = PNMTypes[signature];\n    const lines = buffer.toString(\"ascii\", 3).split(/[\\r\\n]+/);\n    const handler = handlers[type] || handlers.default;\n    return handler(lines);\n  }\n};\n\nconst PSD = {\n  validate(buffer) {\n    return buffer.toString(\"ascii\", 0, 4) === \"8BPS\";\n  },\n  calculate(buffer) {\n    return {\n      height: buffer.readUInt32BE(14),\n      width: buffer.readUInt32BE(18)\n    };\n  }\n};\n\nconst svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nconst extractorRegExps = {\n  height: /\\sheight=(['\"])([^%]+?)\\1/,\n  root: svgReg,\n  viewbox: /\\sviewBox=(['\"])(.+?)\\1/,\n  width: /\\swidth=(['\"])([^%]+?)\\1/\n};\nconst INCH_CM = 2.54;\nconst units = {\n  cm: 96 / INCH_CM,\n  em: 16,\n  ex: 8,\n  m: 96 / INCH_CM * 100,\n  mm: 96 / INCH_CM / 10,\n  pc: 96 / 72 / 12,\n  pt: 96 / 72\n};\nfunction parseLength(len) {\n  const m = /([0-9.]+)([a-z]*)/.exec(len);\n  if (!m) {\n    return void 0;\n  }\n  return Math.round(parseFloat(m[1]) * (units[m[2]] || 1));\n}\nfunction parseViewbox(viewbox) {\n  const bounds = viewbox.split(\" \");\n  return {\n    height: parseLength(bounds[3]),\n    width: parseLength(bounds[2])\n  };\n}\nfunction parseAttributes(root) {\n  const width = root.match(extractorRegExps.width);\n  const height = root.match(extractorRegExps.height);\n  const viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    height: height && parseLength(height[2]),\n    viewbox: viewbox && parseViewbox(viewbox[2]),\n    width: width && parseLength(width[2])\n  };\n}\nfunction calculateByDimensions(attrs) {\n  return {\n    height: attrs.height,\n    width: attrs.width\n  };\n}\nfunction calculateByViewbox(attrs, viewbox) {\n  const ratio = viewbox.width / viewbox.height;\n  if (attrs.width) {\n    return {\n      height: Math.floor(attrs.width / ratio),\n      width: attrs.width\n    };\n  }\n  if (attrs.height) {\n    return {\n      height: attrs.height,\n      width: Math.floor(attrs.height * ratio)\n    };\n  }\n  return {\n    height: viewbox.height,\n    width: viewbox.width\n  };\n}\nconst SVG = {\n  validate(buffer) {\n    const str = String(buffer);\n    return svgReg.test(str);\n  },\n  calculate(buffer) {\n    const root = buffer.toString(\"utf8\").match(extractorRegExps.root);\n    if (root) {\n      const attrs = parseAttributes(root[0]);\n      if (attrs.width && attrs.height) {\n        return calculateByDimensions(attrs);\n      }\n      if (attrs.viewbox) {\n        return calculateByViewbox(attrs, attrs.viewbox);\n      }\n    }\n    throw new TypeError(\"Invalid SVG\");\n  }\n};\n\nfunction calculateExtended(buffer) {\n  return {\n    height: 1 + buffer.readUIntLE(7, 3),\n    width: 1 + buffer.readUIntLE(4, 3)\n  };\n}\nfunction calculateLossless(buffer) {\n  return {\n    height: 1 + ((buffer[4] & 15) << 10 | buffer[3] << 2 | (buffer[2] & 192) >> 6),\n    width: 1 + ((buffer[2] & 63) << 8 | buffer[1])\n  };\n}\nfunction calculateLossy(buffer) {\n  return {\n    height: buffer.readInt16LE(8) & 16383,\n    width: buffer.readInt16LE(6) & 16383\n  };\n}\nconst WEBP = {\n  validate(buffer) {\n    const riffHeader = buffer.toString(\"ascii\", 0, 4) === \"RIFF\";\n    const webpHeader = buffer.toString(\"ascii\", 8, 12) === \"WEBP\";\n    const vp8Header = buffer.toString(\"ascii\", 12, 15) === \"VP8\";\n    return riffHeader && webpHeader && vp8Header;\n  },\n  calculate(buffer) {\n    const chunkHeader = buffer.toString(\"ascii\", 12, 16);\n    buffer = buffer.slice(20, 30);\n    if (chunkHeader === \"VP8X\") {\n      const extendedHeader = buffer[0];\n      const validStart = (extendedHeader & 192) === 0;\n      const validEnd = (extendedHeader & 1) === 0;\n      if (validStart && validEnd) {\n        return calculateExtended(buffer);\n      } else {\n        throw new TypeError(\"Invalid WebP\");\n      }\n    }\n    if (chunkHeader === \"VP8 \" && buffer[0] !== 47) {\n      return calculateLossy(buffer);\n    }\n    const signature = buffer.toString(\"hex\", 3, 6);\n    if (chunkHeader === \"VP8L\" && signature !== \"9d012a\") {\n      return calculateLossless(buffer);\n    }\n    throw new TypeError(\"Invalid WebP\");\n  }\n};\n\nconst typeHandlers = {\n  bmp: BMP,\n  cur: CUR,\n  dds: DDS,\n  gif: GIF,\n  icns: ICNS,\n  ico: ICO,\n  j2c: J2C,\n  jp2: JP2,\n  jpg: JPG,\n  ktx: KTX,\n  png: PNG,\n  pnm: PNM,\n  psd: PSD,\n  svg: SVG,\n  webp: WEBP\n};\nconst getMimeType = (type) => {\n  if (type === \"svg\") {\n    return \"image/svg+xml\";\n  }\n  return `image/${type}`;\n};\n\nconst keys = Object.keys(typeHandlers);\nconst firstBytes = {\n  56: \"psd\",\n  66: \"bmp\",\n  68: \"dds\",\n  71: \"gif\",\n  73: \"tiff\",\n  77: \"tiff\",\n  82: \"webp\",\n  105: \"icns\",\n  137: \"png\",\n  255: \"jpg\"\n};\nfunction detector(buffer) {\n  const byte = buffer[0];\n  if (byte in firstBytes) {\n    const type = firstBytes[byte];\n    if (typeHandlers[type].validate(buffer)) {\n      return type;\n    }\n  }\n  const finder = (key) => typeHandlers[key].validate(buffer);\n  return keys.find(finder);\n}\n\nfunction lookup(buffer, filepath) {\n  const type = detector(buffer);\n  if (type && type in typeHandlers) {\n    const size = typeHandlers[type].calculate(buffer, filepath);\n    if (size !== void 0) {\n      size.type = type;\n      size.mimeType = getMimeType(type);\n      return size;\n    }\n  }\n  throw new TypeError(\"unsupported file type: \" + type + \" (file: \" + filepath + \")\");\n}\nfunction imageMeta(input) {\n  if (Buffer.isBuffer(input)) {\n    return lookup(input);\n  }\n  throw new Error(\"Input should be buffer!\");\n}\nconst types = Object.keys(typeHandlers);\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node-libs-browser/node_modules/buffer/index.js */ \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/image-meta/dist/index.mjs\n");

/***/ })

}]);